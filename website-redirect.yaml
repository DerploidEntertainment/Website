AWSTemplateFormatVersion: '2010-09-09'
Description: Resources for redirecting alternate domains to the organization's website

Parameters:
  WebsiteStackName:
    Type: String
    Description: Name of the CloudFormation stack that defines the website's resources (main CDN and origin, main cert, log bucket, etc.)
  RootDomain:
    Type: String
    Default: example
    Description: The domain for which website redirect resources will be created. Do not include the TLD (e.g., use 'example' not 'example.com').
  TLD:
    Type: String
    Default: com
    Description: The Top Level Domain (TDL) under which RootDomain is registered
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: >
      The Route53 hosted zone for the domain at ${RootDomain}.${TLD}. All new DNS records will be added to that hosted zone.
      Using an existing zone simplifies DNS validation for TLS certificates during stack creation, and allows you to easily work with record sets not added by this template.
  Region:
    Type: String
    Default: us-east-1
    Description: >
      This parameter is really just here to remind you that a stack can only be created from this template in the US East (N. Virginia) region.
      This is required for the DNSSEC key-signing key and ACM certificate that will be generated.
    AllowedPattern: ^us-east-1$
    ConstraintDescription: must equal 'us-east-1'.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label: Website redirects
      Parameters:
      - WebsiteStackName
      - RootDomain
      - TLD
      - HostedZoneId
      - Region

Mappings:
  Global:
    Dns:
      LogRetentionDays: 30   # Valid values described at: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-retentionindays
    Hosting:
      BucketLogExpirationDays: 30

Resources:
  WebsiteCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Sub www.${RootDomain}.${TLD}
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: !Sub ${RootDomain}.${TLD}
        HostedZoneId: !Ref HostedZoneId
      - DomainName: !Sub www.${RootDomain}.${TLD}
        HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames:
      - !Sub ${RootDomain}.${TLD}

  # Redirect the provided domain
  KskAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/dnssec/${RootDomain}-${TLD}-ksk  # alias/ prefix is required (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-alias.html#cfn-kms-alias-aliasname)
      TargetKeyId: !Ref KskMasterKey
  KskMasterKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub Master key for DNSSEC signing for the ${RootDomain}.${TLD} and www.${RootDomain}.${TLD} domains
      Enabled: true
      EnableKeyRotation: false  # Key rotation not supported for asymmetric keys. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html#cfn-kms-key-enablekeyrotation
      KeySpec: ECC_NIST_P256    # Asymmetric, 'ECC_NIST_P256' required for this key to be a DNSSEC key-signing key. See https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html
      KeyUsage: SIGN_VERIFY     # 'SIGN_VERIFY' required for ECC key material. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html#cfn-kms-key-keyusage
      KeyPolicy:
        Version: "2012-10-17"
        Statement:  # Adapted from the default policy shown when enabling DNSSEC for a Hosted Zone in the Route 53 Console
        - Sid: Enable root user to manage key
          Effect: Allow
          Principal: { AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root" }
          Action: kms:*
          Resource: "*"
        - Sid: Allow Route 53 DNSSEC service to work with key
          Effect: Allow
          Principal: { Service: dnssec-route53.amazonaws.com }
          Action: [ kms:DescribeKey, kms:GetPublicKey, kms:Sign ]
          Resource: "*"
        - Sid: Allow Route 53 DNSSEC service to create grants for key, as long as they're given to other AWS resources
          Effect: Allow
          Principal: { Service: dnssec-route53.amazonaws.com }
          Action: kms:CreateGrant
          Resource: "*"
          Condition:
            Bool: { kms:GrantIsForAWSResource: true }
  KeySigningKey:
    Type: AWS::Route53::KeySigningKey
    Properties:
      HostedZoneId: !Ref HostedZoneId
      KeyManagementServiceArn: !GetAtt KskMasterKey.Arn
      Name: key_signing_key   # Cannot include hyphens. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-keysigningkey.html#cfn-route53-keysigningkey-name
      Status: ACTIVE
  Dnssec:
    Type: AWS::Route53::DNSSEC
    DependsOn: KeySigningKey
    Properties:
      HostedZoneId: !Ref HostedZoneId
  RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Record sets to route traffic to the website CDN
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        # CDN alias records
        # TTL always equals 60s for alias records and can't be changed
        # The hard-coded HostedZoneId is required when alias routes to CloudFront distribution. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-hostedzoneid
        # EvaluateTargetHealth cannot be true when the alias target is a CloudFront distribution. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html#cfn-route53-aliastarget-evaluatetargethealth
        - Name: !Sub ${RootDomain}.${TLD}
          Type: A
          AliasTarget: { DNSName: !GetAtt RedirectCdn.DomainName, HostedZoneId: Z2FDTNDATAQYW2, EvaluateTargetHealth: false }
        - Name: !Sub ${RootDomain}.${TLD}
          Type: AAAA
          AliasTarget: { DNSName: !GetAtt RedirectCdn.DomainName, HostedZoneId: Z2FDTNDATAQYW2, EvaluateTargetHealth: false }
        - Name: !Sub www.${RootDomain}.${TLD}
          Type: A
          AliasTarget: { DNSName: !GetAtt RedirectCdn.DomainName, HostedZoneId: Z2FDTNDATAQYW2, EvaluateTargetHealth: false }
        - Name: !Sub www.${RootDomain}.${TLD}
          Type: AAAA
          AliasTarget: { DNSName: !GetAtt RedirectCdn.DomainName, HostedZoneId: Z2FDTNDATAQYW2, EvaluateTargetHealth: false }

        # Certificate Authority Authorization, so that ONLY ACM can issue certs for ONLY the following domains
        # 60s TTL recommended when associated with a health check (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset-1.html#cfn-route53-recordset-ttl)
        # Quotes around domains required
        - Name: !Sub ${RootDomain}.${TLD}
          Type: CAA
          TTL: 60
          ResourceRecords:
          - 0 issue "amazon.com"
          - 0 issue "amazontrust.com"
          - 0 issue "awstrust.com"
          - 0 issue "amazonaws.com"
        - Name: !Sub www.${RootDomain}.${TLD}
          Type: CAA
          TTL: 60
          ResourceRecords:
          - 0 issue "amazon.com"
          - 0 issue "amazontrust.com"
          - 0 issue "awstrust.com"
          - 0 issue "amazonaws.com"
  RedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${RootDomain}.${TLD}
      LoggingConfiguration:
        DestinationBucketName: { Fn::ImportValue: !Sub "${WebsiteStackName}:LogBucketName" }
        LogFilePrefix: !Sub ${RootDomain}.${TLD}/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: { Fn::ImportValue: !Sub "${WebsiteStackName}:SiteDomain" }
          Protocol: https
  WwwRedirectBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub www.${RootDomain}.${TLD}
      LoggingConfiguration:
        DestinationBucketName: { Fn::ImportValue: !Sub "${WebsiteStackName}:LogBucketName" }
        LogFilePrefix: !Sub www.${RootDomain}.${TLD}/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: { Fn::ImportValue: !Sub "${WebsiteStackName}:SiteDomain" }
          Protocol: https
  RedirectCdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
          Aliases:
          - !Sub ${RootDomain}.${TLD}
          - !Sub www.${RootDomain}.${TLD}
          Comment: !Sub CDN for routing [www.]${RootDomain}.${TLD} requests
          DefaultCacheBehavior:
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6   # Managed-UserAgentRefererHeaders cache policy. See https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            TargetOriginId: S3RedirectBucket
            AllowedMethods: [ GET, HEAD, OPTIONS ]
            CachedMethods: [ GET, HEAD, OPTIONS ]
            # Compress: true  # True automatically compresses CERTAIN file types, not all. May not be necessary for these "redirect distributions"?
            ViewerProtocolPolicy: redirect-to-https   # HTTP requests to distribution are permanently redirected to HTTPS URL
          Enabled: true
          HttpVersion: http1.1  # To support older browsers
          IPV6Enabled: true
          Logging:
            Bucket: !Sub [ "${BucketName}.s3.amazonaws.com", { BucketName: {Fn::ImportValue: !Sub "${WebsiteStackName}:LogBucketName" }} ]
            IncludeCookies: true
            Prefix: !Sub ${RootDomain}-${TLD}-redirect-cdn/
          Origins:
          - Id: S3RedirectBucket
            DomainName: !Sub ${RedirectBucket}.s3-website.${AWS::Region}.amazonaws.com   # !GetAtt *.WebsiteURL would include "http://", which CloudFront doesn't allow
            CustomOriginConfig:
              OriginProtocolPolicy: http-only  # The S3 bucket origin (configured for static website redirects) only supports HTTP
              OriginSSLProtocols: [ TLSv1.2 ]
            # OriginShield: not necessary for these "redirect buckets" since their traffic will probably stay low as their requests are permanently moved to the hosting domain
          PriceClass: PriceClass_100  # Use only U.S., Canada, and Europe. Not worth paying for more just for redirecting to main CDN
          ViewerCertificate:
            AcmCertificateArn: !Ref WebsiteCert
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
          # WebACLId: String

Outputs:
  RedirectBucket:
    Description: Name of the S3 bucket for redirecting requests from <RootDomain>.<TLD> to the main website
    Value: !Ref RedirectBucket
  WwwRedirectBucket:
    Description: Name of the S3 bucket for redirecting requests from www.<RootDomain>.<TLD> to the main website
    Value: !Ref WwwRedirectBucket
  RedirectCdn:
    Description: ID of the CloudFront distribution for redirecting requests from [www.]<RootDomain>.<TLD> to the main website
    Value: !Ref RedirectCdn
